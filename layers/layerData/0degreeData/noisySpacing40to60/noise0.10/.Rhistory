pred <- predict(baseline, se.fit = TRUE)
SE <- pred$se.fit
zB <- qnorm(.025/N, lower.tail = FALSE)
xg <- c(P$freq,p$freq[N:1])
xg <- c(P$freq,P$freq[N:1])
yg <- c(baseline$fitted.values - zB*SE,(baseline$fitted.values + zB*SE)[N:1])
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
library(scales)
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "56.162", col = "grey40")
lines(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
lines(P$freq, baseline$fitted.values, col = "violetred1", lwd = 2)
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
lines(P$freq, lowerBound, col = "cornflowerblue", lwd = 2)
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "56.162", col = "grey40")
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
lines(P$freq, baseline$fitted.values, col = "violetred1", lwd = 2)
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "56.162", col = "grey40")
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "", col = "grey40")
mtext("Smoothed Periodogram with Confidence Band for Baseline",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
legend("topright", legend = "baseline",
col = c("tomato"), lty = c(1),lwd = 3,inset = 0.05)
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "", col = "grey40")
mtext("Smoothed Periodogram with Peak Detection",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
legend("topright", legend = "baseline",
col = c("tomato"), lty = c(1),lwd = 3,inset = 0.05)
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60")
inputFiles <- list.files(full.names = TRUE)
for(coupon in inputFiles[1:25]){
load(coupon)
#load("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60/56.162spacingSyn0.rda")
#create series data (count values for hist bins)
h <- hist(~nlsCoupon[,3], w=5, plot = FALSE)
counts <- h$counts
coords <- h$mids
# detrend the series using a spline
xGrid <- seq(min(coords), max(coords), length.out = length(coords))
highpass <- splint(coords, counts, xGrid, lambda = 50) #lambda set to be very smooth
detrendedData <- counts - highpass
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "", col = "grey40")
mtext("Smoothed Periodogram with Peak Detection",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
#P <- mvspec(detrendedData)
# calculate lower bounds of 95% confidence intervals for each
# periodogram ordinate
df = P$df
L = qchisq(.975, df)
U = qchisq(.025, df)
n = length(P$freq)
lowerBound <- rep(NA, n)
upperBound <- rep(NA, n)
for(i in 1:n){
lowerBound[i] <- df*P$spec[i]/L
upperBound[i] <- df*P$spec[i]/U
}
# points(P$freq, upperBound, pch = 20, col = "tomato")
# lines(P$freq, lowerBound, col = "cornflowerblue", lwd = 2)
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
# establish baseline for periodogram using linear model
baseline <- lm(P$spec ~ P$freq)
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
N = length(P$freq)
# get standard errors at each fitted value
pred <- predict(baseline, se.fit = TRUE)
SE <- pred$se.fit
zB <- qnorm(.025/N, lower.tail = FALSE)
xg <- c(P$freq,P$freq[N:1])
yg <- c(baseline$fitted.values - zB*SE,(baseline$fitted.values + zB*SE)[N:1])
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
legend("topright", legend = "baseline",
col = c("tomato"), lty = c(1),lwd = 3,inset = 0.05)
# find peaks in periodogram
peaks <- which(lowerBound > baseline$fitted.values)
# calculate test statistic
print(sum(P$spec[peaks])/sum(P$spec))
}
gc()
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/noLayers")
inputFiles <- list.files(full.names = TRUE)
for(coupon in inputFiles[1:25]){
load(coupon)
#load("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60/56.162spacingSyn0.rda")
#create series data (count values for hist bins)
h <- hist(~nlsCoupon[,3], w=5, plot = FALSE)
counts <- h$counts
coords <- h$mids
# detrend the series using a spline
xGrid <- seq(min(coords), max(coords), length.out = length(coords))
highpass <- splint(coords, counts, xGrid, lambda = 50) #lambda set to be very smooth
detrendedData <- counts - highpass
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "", col = "grey40")
mtext("Smoothed Periodogram with Peak Detection",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
#P <- mvspec(detrendedData)
# calculate lower bounds of 95% confidence intervals for each
# periodogram ordinate
df = P$df
L = qchisq(.975, df)
U = qchisq(.025, df)
n = length(P$freq)
lowerBound <- rep(NA, n)
upperBound <- rep(NA, n)
for(i in 1:n){
lowerBound[i] <- df*P$spec[i]/L
upperBound[i] <- df*P$spec[i]/U
}
# points(P$freq, upperBound, pch = 20, col = "tomato")
# lines(P$freq, lowerBound, col = "cornflowerblue", lwd = 2)
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
# establish baseline for periodogram using linear model
baseline <- lm(P$spec ~ P$freq)
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
N = length(P$freq)
# get standard errors at each fitted value
pred <- predict(baseline, se.fit = TRUE)
SE <- pred$se.fit
zB <- qnorm(.025/N, lower.tail = FALSE)
xg <- c(P$freq,P$freq[N:1])
yg <- c(baseline$fitted.values - zB*SE,(baseline$fitted.values + zB*SE)[N:1])
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
legend("topright", legend = "baseline",
col = c("tomato"), lty = c(1),lwd = 3,inset = 0.05)
# find peaks in periodogram
peaks <- which(lowerBound > baseline$fitted.values)
# calculate test statistic
print(sum(P$spec[peaks])/sum(P$spec))
}
load("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60/56.162spacingSyn0.rda")
#create series data (count values for hist bins)
h <- hist(~nlsCoupon[,3], w=5, plot = FALSE)
counts <- h$counts
coords <- h$mids
# detrend the series using a spline
xGrid <- seq(min(coords), max(coords), length.out = length(coords))
detrendedData <- counts - highpass
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "", col = "grey40")
mtext("Smoothed Periodogram with Peak Detection",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
# calculate lower bounds of 95% confidence intervals for each
# periodogram ordinate
df = P$df
L = qchisq(.975, df)
highpass <- splint(coords, counts, xGrid, lambda = 50) #lambda set to be very smooth
U = qchisq(.025, df)
lowerBound <- rep(NA, n)
upperBound <- rep(NA, n)
n = length(P$freq)
for(i in 1:n){
lowerBound[i] <- df*P$spec[i]/L
upperBound[i] <- df*P$spec[i]/U
}
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
# establish baseline for periodogram using linear model
baseline <- lm(P$spec ~ P$freq)
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
N = length(P$freq)
# get standard errors at each fitted value
pred <- predict(baseline, se.fit = TRUE)
SE <- pred$se.fit
zB <- qnorm(.025/N, lower.tail = FALSE)
xg <- c(P$freq,P$freq[N:1])
yg <- c(baseline$fitted.values - zB*SE,(baseline$fitted.values + zB*SE)[N:1])
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
legend("topright", legend = "baseline",
col = c("tomato"), lty = c(1),lwd = 3,inset = 0.05)
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles) #number of coupons in the sample size
TSZlayersU <- rep(NA, N) #test statistic (TS), zero degree, layers
i = 1 #dummy index to increment TS
# load required function files
setwd("C:/Users/barna/Documents/Coupons/layers/layerFunctions")
load("couponCov.rda")
source("calculateTestStatistic.R")
source("rotations.R")
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles) #number of coupons in the sample size
i = 1 #dummy index to increment TS
TSZlayersU <- rep(NA, N) #test statistic (TS), zero degree, layers
for(coupon in inputFiles){
load(coupon)
# calculate the test statistic
TSZlayersU[i] <- getTestStatistic(nlsCoupon)
i = i + 1
}
## -------------------------------
## TS boxplot for 0 degree coupons
## --------------------------------
TSZlayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZlayers.rds")
boxplot(TSZlayers, TSZlayersU)
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/noLayers")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles) #number of coupons in the sample size
TSZnolayersU <- rep(NA, N) #test statistic (TS), zero degree, not layered
i = 1 #dummy index to increment TS
for(coupon in inputFiles){
load(coupon)
# calculate the test statistic
TSZnolayersU[i] <- getTestStatistic(nlsCoupon)
i = i + 1
}
TSZnolayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZnolayers.rds")
boxplot(TSZnolayers, TSZnolayersU)
TSZreal <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZreal.rds")
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/porosity/nlsPorosityData/cropped")
inputFiles <- list.files(full.names = TRUE)
zeros <- which(couponCov$polarAngle == 0)
N <- length(inputFiles[zeros]) #number of coupons in the sample size
TSZrealU <- rep(NA, N) #test statistic (TS), zero degree, not layered
i = 1 #dummy index to increment TS
for(coupon in inputFiles[zeros]){
load(coupon)
# calculate the test statistic
TSZrealU[i] <- getTestStatistic(nlsCoupon)
i = i + 1
}
boxplot(TSZreal, TSZrealU)
par(mfrow = c(1,2))
boxplot(TSZnolayers, TSZreal, TSZlayers)
boxplot(TSZnolayersU, TSZrealU, TSZlayersU, ylim = c(0,0.8))
# load required function files
setwd("C:/Users/barna/Documents/Coupons/layers/layerFunctions")
load("couponCov.rda")
source("calculateTestStatistic.R")
source("rotations.R")
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles) #number of coupons in the sample size
TSZlayersU <- rep(NA, N) #test statistic (TS), zero degree, layers
i = 1 #dummy index to increment TS
for(coupon in inputFiles){
load(coupon)
# calculate the test statistic
TSZlayersU[i] <- getTestStatistic(nlsCoupon)
i = i + 1
}
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/noLayers")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles) #number of coupons in the sample size
TSZnolayersU <- rep(NA, N) #test statistic (TS), zero degree, not layered
i = 1 #dummy index to increment TS
for(coupon in inputFiles){
load(coupon)
# calculate the test statistic
TSZnolayersU[i] <- getTestStatistic(nlsCoupon)
i = i + 1
}
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/porosity/nlsPorosityData/cropped")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles[zeros]) #number of coupons in the sample size
zeros <- which(couponCov$polarAngle == 0)
TSZrealU <- rep(NA, N) #test statistic (TS), zero degree, not layered
i = 1 #dummy index to increment TS
for(coupon in inputFiles[zeros]){
load(coupon)
# calculate the test statistic
TSZrealU[i] <- getTestStatistic(nlsCoupon)
i = i + 1
}
boxplot(TSZnolayers, TSZreal, TSZlayers, ylim = c(0,0.75))
boxplot(TSZnolayersU, TSZrealU, TSZlayersU, ylim = c(0,0.75))
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/spacing40to60")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles) #number of coupons in the sample size
angleSeq <- seq(0, 2*pi, length.out = 100) #increment by which we change rotation
tempTS <- rep(NA, 100) #store TS for each rotation
TSFlayersU <- rep(NA, N) #test statistic (TS), forty-five degree, layered
i = 1 #dummy index to increment TS
for(coupon in inputFiles){
load(coupon)
print(i)
m = 1
for(w in angleSeq){
rotatedCoupon <- rotateFortyFive(w, nlsCoupon) #center and rotate the coupon
tempTS[m] <- getTestStatistic(rotatedCoupon) #calc TS for rotated coupon
m=m+1
}
TSFlayersU[i] <- max(tempTS)
i = i + 1
}
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/noLayers")
inputFiles <- list.files(full.names = TRUE)
N <- length(inputFiles) #number of coupons in the sample size
angleSeq <- seq(0, 2*pi, length.out = 100) #increment by which we change rotation
tempTS <- rep(NA, 100) #store TS for each rotation
TSFnolayersU <- rep(NA, N) #test statistic (TS), forty-five degree, not layered
i = 1 #dummy index to increment TS
for(coupon in inputFiles){
load(coupon)
print(i)
m = 1
for(w in angleSeq){
rotatedCoupon <- rotateFortyFive(w, nlsCoupon) #center and rotate the coupon
tempTS[m] <- getTestStatistic(rotatedCoupon) #calc TS for rotated coupon
m=m+1
}
TSFnolayersU[i] <- max(tempTS)
i = i + 1
}
## --------------------------------
## TS boxplot for 45 degree coupons
## --------------------------------
TSFlayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/TSFlayers.rds")
TSFnolayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/TSFnolayers.rds")
TSFreal <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/TSFreal.rds")
boxplot(TSFnolayers, TSFnolayersU)
boxplot(TSFnolayers, TSFnolayersU, TSFlayers, TSFlayersU)
source('~/Coupons/layers/testForLayers.R', echo=TRUE)
## -------------------------------
## TS boxplot for 0 degree coupons
## --------------------------------
TSZlayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZlayers.rds")
TSZnolayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZnolayers.rds")
TSZreal <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZreal.rds")
TSZreal <- c(TSZreal, rep(NA, 100-16))
zerosAll <- cbind(TSZnolayers, TSZreal, TSZlayers)
colnames(zerosAll) <- c("no layers", "experimental", "layered")
windowsFonts(A = windowsFont("Times New Roman"))
par(family = "A", cex.lab = 1.2)
boxplot(zerosAll,
ylab = "test statistic", xlab = "coupon populations",
cex.lab = 1.2, family = "A",
pch = 20, boxlwd = 2, boxwex = 0.5,
ylim = c(0,1))
mtext("Distribution of Test Statistic, 0 degree Coupons",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
dev.off(0)
dev.off()
windowsFonts(A = windowsFont("Times New Roman"))
par(family = "A", cex.lab = 1.2)
boxplot(zerosAll,
ylab = "test statistic", xlab = "coupon populations",
cex.lab = 1.2, family = "A",
pch = 20, boxlwd = 2, boxwex = 0.5,
ylim = c(0,1))
mtext("Distribution of Test Statistic, 0 degree Coupons",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
## --------------------------------
## TS boxplot for 45 degree coupons
## --------------------------------
TSFlayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/TSFlayers.rds")
TSFnolayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/TSFnolayers.rds")
TSFreal <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/45degreeData/TSFreal.rds")
TSFreal <- c(TSFreal, rep(NA, 100-24))
ffAll <- cbind(TSFnolayers, TSFreal, TSFlayers)
colnames(ffAll) <- c("no layers", "experimental", "layered")
windowsFonts(A = windowsFont("Times New Roman"))
par(family = "A", cex.lab = 1.2)
boxplot(ffAll,
ylab = "test statistic", xlab = "coupon populations",
cex.lab = 1.2, family = "A",
pch = 20, boxlwd = 2, boxwex = 0.5,
ylim = c(0,1))
mtext("Distribution of Test Statistic, 45 degree Coupons",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/noLayers")
setwd("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60")
inputFiles <- list.files(full.names = TRUE)
for(coupon in inputFiles[1:25]){
load(coupon)
#load("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60/56.162spacingSyn0.rda")
#create series data (count values for hist bins)
h <- hist(~nlsCoupon[,3], w=5, plot = FALSE)
counts <- h$counts
coords <- h$mids
# detrend the series using a spline
xGrid <- seq(min(coords), max(coords), length.out = length(coords))
highpass <- splint(coords, counts, xGrid, lambda = 50) #lambda set to be very smooth
detrendedData <- counts - highpass
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "", col = "grey40")
mtext("Smoothed Periodogram with Peak Detection",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
#P <- mvspec(detrendedData)
# calculate lower bounds of 95% confidence intervals for each
# periodogram ordinate
df = P$df
L = qchisq(.975, df)
U = qchisq(.025, df)
n = length(P$freq)
lowerBound <- rep(NA, n)
upperBound <- rep(NA, n)
for(i in 1:n){
lowerBound[i] <- df*P$spec[i]/L
upperBound[i] <- df*P$spec[i]/U
}
# points(P$freq, upperBound, pch = 20, col = "tomato")
# lines(P$freq, lowerBound, col = "cornflowerblue", lwd = 2)
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
# establish baseline for periodogram using linear model
baseline <- lm(P$spec ~ P$freq)
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
N = length(P$freq)
# get standard errors at each fitted value
pred <- predict(baseline, se.fit = TRUE)
SE <- pred$se.fit
zB <- qnorm(.025/N, lower.tail = FALSE)
xg <- c(P$freq,P$freq[N:1])
yg <- c(baseline$fitted.values - zB*SE,(baseline$fitted.values + zB*SE)[N:1])
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
legend("topright", legend = "baseline",
col = c("tomato"), lty = c(1),lwd = 3,inset = 0.05)
# find peaks in periodogram
peaks <- which(lowerBound > baseline$fitted.values)
# calculate test statistic
print(sum(P$spec[peaks])/sum(P$spec))
}
for(coupon in inputFiles){
load(coupon)
#load("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/spacing40to60/56.162spacingSyn0.rda")
#create series data (count values for hist bins)
h <- hist(~nlsCoupon[,3], w=5, plot = FALSE)
counts <- h$counts
coords <- h$mids
# detrend the series using a spline
xGrid <- seq(min(coords), max(coords), length.out = length(coords))
highpass <- splint(coords, counts, xGrid, lambda = 50) #lambda set to be very smooth
detrendedData <- counts - highpass
# calculate the dft and compute smoothed periodogram using mvspec(.)
P <- mvspec(detrendedData, kernel('daniell',2), log='no', main = "", col = "grey40")
mtext("Smoothed Periodogram with Peak Detection",
side=3, adj=0, line=1.6, cex=1.4, font=2, family = "A")
#P <- mvspec(detrendedData)
# calculate lower bounds of 95% confidence intervals for each
# periodogram ordinate
df = P$df
L = qchisq(.975, df)
U = qchisq(.025, df)
n = length(P$freq)
lowerBound <- rep(NA, n)
upperBound <- rep(NA, n)
for(i in 1:n){
lowerBound[i] <- df*P$spec[i]/L
upperBound[i] <- df*P$spec[i]/U
}
# points(P$freq, upperBound, pch = 20, col = "tomato")
# lines(P$freq, lowerBound, col = "cornflowerblue", lwd = 2)
points(P$freq, lowerBound, pch = 20, col = "cornflowerblue")
# establish baseline for periodogram using linear model
baseline <- lm(P$spec ~ P$freq)
lines(P$freq, baseline$fitted.values, col = "tomato", lwd = 2)
N = length(P$freq)
# get standard errors at each fitted value
pred <- predict(baseline, se.fit = TRUE)
SE <- pred$se.fit
zB <- qnorm(.025/N, lower.tail = FALSE)
xg <- c(P$freq,P$freq[N:1])
yg <- c(baseline$fitted.values - zB*SE,(baseline$fitted.values + zB*SE)[N:1])
polygon( xg, yg, border="grey",col=alpha("magenta",.1))
polygon( xg, yg, border="grey",col=alpha("tomato",.1))
legend("topright", legend = "baseline",
col = c("tomato"), lty = c(1),lwd = 3,inset = 0.05)
# find peaks in periodogram
peaks <- which(lowerBound > baseline$fitted.values)
# calculate test statistic
print(sum(P$spec[peaks])/sum(P$spec))
}
# load required function files
setwd("C:/Users/barna/Documents/Coupons/layers/layerFunctions")
load("couponCov.rda")
source("calculateTestStatistic.R")
source("rotations.R")
noiseAmt <- matrix(nrow = 100, ncol = 10)
for(j in 1:10){
setwd(paste0("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/noisySpacing40to60/noise0.", j))
inputFiles <- list.files(full.names = TRUE)
i = 1 #dummy index to increment TS
for(coupon in inputFiles){
load(coupon)
# calculate the test statistic
noiseAmt[i,j] <- getTestStatistic(nlsCoupon)
i = i + 1
}
}
boxplot(noiseAmt)
TSZlayers <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZlayers.rds")
TSZnoise <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/noisySpacing40to60/TSZnoise.rds")
TSZreal <- readRDS("C:/Users/barna/Documents/Coupons/layers/layerData/0degreeData/TSZreal.rds")
allNoise <- cbind(TSZlayers, TSZnoise, c(TSZreal, rep(NA, 100-16)))
boxplot(allNoise)
