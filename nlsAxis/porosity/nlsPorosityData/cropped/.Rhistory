library(fields)
library(plyr)
setwd("C:/Users/barna/Documents/Coupons/datasets")
poreData <- readRDS("porosityData.rds")
# store radii for iteration comparison
radiusFirstIter <- list()
radiusLastIter <-  list()
SEfirst <- list()
SEfinal <- list()
n=4
library(rgl)
ordered <- order(poreData[[n]]$comZ)
comX <- poreData[[n]]$comX[ordered]
comY <- poreData[[n]]$comY[ordered]
comZ <- poreData[[n]]$comZ[ordered]
poreCoordinates <- cbind( comX,
comY,
comZ)
plot3d(comX,comY,comZ, type = "s", size = 0.45)
good <- (comZ >= deciles[3] & comZ <= deciles[9])
deciles <- quantile(comZ, prob = seq(0, 1, length = 11), type = 5)
good <- (comZ >= deciles[3] & comZ <= deciles[9])
poreCoordinates <- cbind( comX[good],
comY[good],
comZ[good])
## get centers of mass for upper and lower half of the coupon to
## compute axisVector, which is the direction vector for
## the initial axis estimate
upperHalf1 <- (comZ >= deciles[6]) & good
lowerHalf1 <- (comZ <= deciles[6]) & good
deciles2 <- quantile(poreCoordinates[,3], prob = seq(0, 1, length = 11), type = 5)
upperHalf2 <- poreCoordinates[,3] >= deciles2[6]
all(upperHalf1, upperHalf2)
upperHalf1
testOld <- poreCoordinates[upperHalf1,]
good <- (comZ >= deciles[3] & comZ <= deciles[9])
## get centers of mass for upper and lower half of the coupon to
## compute axisVector, which is the direction vector for
## the initial axis estimate
upperHalf1 <- (comZ >= deciles[6]) & good
upperHalf2 <- poreCoordinates[,3] >= deciles2[6]
testOld <- poreCoordinates[upperHalf1,]
ordered <- order(poreData[[n]]$comZ)
comX <- poreData[[n]]$comX[ordered]
comY <- poreData[[n]]$comY[ordered]
comZ <- poreData[[n]]$comZ[ordered]
oldCoupon <- cbind( comX,
comY,
comZ)
deciles <- quantile(comZ, prob = seq(0, 1, length = 11), type = 5)
good <- (comZ >= deciles[3] & comZ <= deciles[9])
poreCoordinates <- cbind( comX[good],
comY[good],
comZ[good])
deciles2 <- quantile(poreCoordinates[,3], prob = seq(0, 1, length = 11), type = 5)
## get centers of mass for upper and lower half of the coupon to
## compute axisVector, which is the direction vector for
## the initial axis estimate
upperHalf1 <- (comZ >= deciles[6]) & good
upperHalf2 <- poreCoordinates[,3] >= deciles2[6]
testUp1 <- comX[upperHalf1]
testUp2 <- poreCoordinates[,1][upperHalf2]
all(testUp1, testUp2)
identical(testUp1, testUp2)
## get centers of mass for upper and lower half of the coupon to
## compute axisVector, which is the direction vector for
## the initial axis estimate
deciles <- quantile(poreCoordinates[,3], prob = seq(0, 1, length = 11), type = 5)
upperHalf <- poreCoordinates[,3] >= deciles[6]
lowerHalf <- poreCoordinates[,3] <= deciles[6]
axisVector <- colMeans(poreCoordinates[upperHalf,]) - colMeans(poreCoordinates[lowerHalf,])
axisVector <- axisVector / sqrt(sum(axisVector^2)) # make it unit length
## project the centroid into the x-y plane along axisVector.
## allows us the parameterize the centroid using two parameters
## (x,y,0) rather than three (x,y,z)
centroid <- colMeans(poreCoordinates)
xyCentroid <- c( (axisVector[1]*-centroid[3])/axisVector[3] + centroid[1],
(axisVector[2]*-centroid[3])/axisVector[3] + centroid[2],
0)
xyCentroid <- c( (axisVector[1]*-centroid[3])/axisVector[3] + centroid[1],
(axisVector[2]*-centroid[3])/axisVector[3] + centroid[2],
0)
startingValues <- rbind(axisVector, xyCentroid)
View(startingValues)
source("initialParameters.R")
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy")
source("initialParameters.R")
source("alignCoupon.R")
source("radiusAligned.R")
startValues <- getInitialParameters(poreCoordinates)
identical(startValues[1,], axisVector)
N <- length(poreCoordinates[,1])
radiusTarget <- rep(r, N)
centerAxis <- nls(radiusTarget~radiusAligned(poreCoordinates, centroidX, centroidY, axisVectorX, axisVectorY),
start = list(centroidX = startValues[2,1], centroidY = startValues[2,2],
axisVectorX = startValues[1,1], axisVectorY = startValues[1,2]))
r=1000
radiusTarget <- rep(r, N)
centerAxis <- nls(radiusTarget~radiusAligned(poreCoordinates, centroidX, centroidY, axisVectorX, axisVectorY),
start = list(centroidX = startValues[2,1], centroidY = startValues[2,2],
axisVectorX = startValues[1,1], axisVectorY = startValues[1,2]))
library(fields)
library(plyr)
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy")
source("initialParameters.R")
source("rotateCoupon.R")
source("getRadius.R")
source("newCoupon.R")
setwd("C:/Users/barna/Documents/Coupons/datasets")
poreData <- readRDS("porosityData.rds")
# store radii for iteration comparison
radiusFirstIter <- list()
radiusLastIter <-  list()
j = 1
for(n in 1:5){
## initial radius guess
r = 1000 # based on ideal coupon radius of 1000 micor-meters
## tolerance for radius diff
tol = 0.001
diffMedians = 100
##--------------------------------------------------------------------
## crop coupon
##--------------------------------------------------------------------
ordered <- order(poreData[[n]]$comZ)
comX <- poreData[[n]]$comX[ordered]
comY <- poreData[[n]]$comY[ordered]
comZ <- poreData[[n]]$comZ[ordered]
oldCoupon <- cbind( comX,
comY,
comZ)
cropSections <- quantile(comZ, prob = seq(0, 1, length = 11), type = 5)
## subset the coupon to avoid the weld/support material remnants
good <- (comZ >= cropSections[3] & comZ <= cropSections[9])
poreCoordinates <- cbind( comX[good],
comY[good],
comZ[good])
##--------------------------------------------------------------------
startValues <- getInitialParameters(poreCoordinates)
N <- length(poreCoordinates[,1])
while (diffMedians > tol){
radiusTarget <- rep(r, N)
centerAxis <- nls(radiusTarget~radiusAligned(poreCoordinates,
centroidX, centroidY,
axisVectorX, axisVectorY),
start = list(centroidX = startValues[2,1],
centroidY = startValues[2,2],
axisVectorX = startValues[1,1],
axisVectorY = startValues[1,2]))
nlsCoeff <- coef(centerAxis)
## run 'getRadius' with the optimal parameter values found by nls
radiusFinal <- radiusAligned(poreCoordinates,
nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
# store the initial median for comaprison (first iteration)
ifelse(diffMedians == 100, radiusFirstIter[[j]] <- radiusFinal, NA)
# update radius and compare to last iteration
diffMedians <- abs(r - median(radiusFinal))
r <- median(radiusFinal)
print(j)
if(j==23){break}
} # end of while loop
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
# store the final median for comparison (last iteration)
radiusLastIter[[j]] <- radiusFinal
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy/couponCaseStudies/caseStudyData/cropped")
newCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
save(oldCoupon, newCoupon, nlsCoeff, file = paste0("nlsCoupon", n, ".rda"))
j = j+1
} # end of for loop
j = 1
for(n in 1:5){
## initial radius guess
r = 1000 # based on ideal coupon radius of 1000 micor-meters
## tolerance for radius diff
tol = 0.001
diffMedians = 100
##--------------------------------------------------------------------
## crop coupon
##--------------------------------------------------------------------
ordered <- order(poreData[[n]]$comZ)
comX <- poreData[[n]]$comX[ordered]
comY <- poreData[[n]]$comY[ordered]
comZ <- poreData[[n]]$comZ[ordered]
oldCoupon <- cbind( comX,
comY,
comZ)
cropSections <- quantile(comZ, prob = seq(0, 1, length = 11), type = 5)
## subset the coupon to avoid the weld/support material remnants
good <- (comZ >= cropSections[3] & comZ <= cropSections[9])
poreCoordinates <- cbind( comX[good],
comY[good],
comZ[good])
##--------------------------------------------------------------------
startValues <- getInitialParameters(poreCoordinates)
N <- length(poreCoordinates[,1])
while (diffMedians > tol){
radiusTarget <- rep(r, N)
centerAxis <- nls(radiusTarget~radiusAligned(poreCoordinates,
centroidX, centroidY,
axisVectorX, axisVectorY),
start = list(centroidX = startValues[2,1],
centroidY = startValues[2,2],
axisVectorX = startValues[1,1],
axisVectorY = startValues[1,2]))
nlsCoeff <- coef(centerAxis)
## run 'getRadius' with the optimal parameter values found by nls
radiusFinal <- radiusAligned(poreCoordinates,
nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
# store the initial median for comaprison (first iteration)
ifelse(diffMedians == 100, radiusFirstIter[[j]] <- radiusFinal, NA)
# update radius and compare to last iteration
diffMedians <- abs(r - median(radiusFinal))
r <- median(radiusFinal)
print(j)
if(j==23){break}
} # end of while loop
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
# store the final median for comparison (last iteration)
radiusLastIter[[j]] <- radiusFinal
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy/porosity/couponCaseStudies/caseStudyData/cropped")
newCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
save(oldCoupon, newCoupon, nlsCoeff, file = paste0("nlsCoupon", n, ".rda"))
j = j+1
} # end of for loop
source("newCoupon.R")
source("getRadius.R")
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy")
source("initialParameters.R")
source("rotateCoupon.R")
source("getRadius.R")
source("newCoupon.R")
setwd("C:/Users/barna/Documents/Coupons/datasets")
poreData <- readRDS("porosityData.rds")
# store radii for iteration comparison
radiusFirstIter <- list()
radiusLastIter <-  list()
j = 1
for(n in 1:5){
## initial radius guess
r = 1000 # based on ideal coupon radius of 1000 micor-meters
## tolerance for radius diff
tol = 0.001
diffMedians = 100
##--------------------------------------------------------------------
## crop coupon
##--------------------------------------------------------------------
ordered <- order(poreData[[n]]$comZ)
comX <- poreData[[n]]$comX[ordered]
comY <- poreData[[n]]$comY[ordered]
comZ <- poreData[[n]]$comZ[ordered]
oldCoupon <- cbind( comX,
comY,
comZ)
cropSections <- quantile(comZ, prob = seq(0, 1, length = 11), type = 5)
## subset the coupon to avoid the weld/support material remnants
good <- (comZ >= cropSections[3] & comZ <= cropSections[9])
poreCoordinates <- cbind( comX[good],
comY[good],
comZ[good])
##--------------------------------------------------------------------
startValues <- getInitialParameters(poreCoordinates)
N <- length(poreCoordinates[,1])
while (diffMedians > tol){
radiusTarget <- rep(r, N)
centerAxis <- nls(radiusTarget~radiusAligned(poreCoordinates,
centroidX, centroidY,
axisVectorX, axisVectorY),
start = list(centroidX = startValues[2,1],
centroidY = startValues[2,2],
axisVectorX = startValues[1,1],
axisVectorY = startValues[1,2]))
nlsCoeff <- coef(centerAxis)
## run 'getRadius' with the optimal parameter values found by nls
radiusFinal <- radiusAligned(poreCoordinates,
nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
# store the initial median for comaprison (first iteration)
ifelse(diffMedians == 100, radiusFirstIter[[j]] <- radiusFinal, NA)
# update radius and compare to last iteration
diffMedians <- abs(r - median(radiusFinal))
r <- median(radiusFinal)
print(j)
if(j==23){break}
} # end of while loop
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
# store the final median for comparison (last iteration)
radiusLastIter[[j]] <- radiusFinal
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy/porosity/couponCaseStudies/caseStudyData/cropped")
newCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
save(oldCoupon, newCoupon, nlsCoeff, file = paste0("nlsCoupon", n, ".rda"))
j = j+1
} # end of for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy")
source("initialParameters.R")
source("rotateCoupon.R")
source("newCoupon.R")
source("getRadius.R")
setwd("C:/Users/barna/Documents/Coupons/datasets")
newCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy")
source("initialParameters.R")
source("rotateCoupon.R")
source("getRadius.R")
source("newCoupon.R")
setwd("C:/Users/barna/Documents/Coupons/datasets")
poreData <- readRDS("porosityData.rds")
# store radii for iteration comparison
radiusFirstIter <- list()
radiusLastIter <-  list()
j = 1
for(n in 1:5){
## initial radius guess
r = 1000 # based on ideal coupon radius of 1000 micor-meters
## tolerance for radius diff
tol = 0.001
diffMedians = 100
##--------------------------------------------------------------------
## crop coupon
##--------------------------------------------------------------------
ordered <- order(poreData[[n]]$comZ)
comX <- poreData[[n]]$comX[ordered]
comY <- poreData[[n]]$comY[ordered]
comZ <- poreData[[n]]$comZ[ordered]
oldCoupon <- cbind( comX,
comY,
comZ)
cropSections <- quantile(comZ, prob = seq(0, 1, length = 11), type = 5)
## subset the coupon to avoid the weld/support material remnants
good <- (comZ >= cropSections[3] & comZ <= cropSections[9])
poreCoordinates <- cbind( comX[good],
comY[good],
comZ[good])
##--------------------------------------------------------------------
startValues <- getInitialParameters(poreCoordinates)
N <- length(poreCoordinates[,1])
while (diffMedians > tol){
radiusTarget <- rep(r, N)
centerAxis <- nls(radiusTarget~radiusAligned(poreCoordinates,
centroidX, centroidY,
axisVectorX, axisVectorY),
start = list(centroidX = startValues[2,1],
centroidY = startValues[2,2],
axisVectorX = startValues[1,1],
axisVectorY = startValues[1,2]))
nlsCoeff <- coef(centerAxis)
## run 'getRadius' with the optimal parameter values found by nls
radiusFinal <- radiusAligned(poreCoordinates,
nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
# store the initial median for comaprison (first iteration)
ifelse(diffMedians == 100, radiusFirstIter[[j]] <- radiusFinal, NA)
# update radius and compare to last iteration
diffMedians <- abs(r - median(radiusFinal))
r <- median(radiusFinal)
print(j)
if(j==23){break}
} # end of while loop
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
# store the final median for comparison (last iteration)
radiusLastIter[[j]] <- radiusFinal
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
newCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy/porosity/couponCaseStudies/caseStudyData/cropped")
save(oldCoupon, newCoupon, nlsCoeff, file = paste0("nlsCoupon", n, ".rda"))
j = j+1
} # end of for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy")
source("initialParameters.R")
source("rotateCoupon.R")
source("getRadius.R")
source("newCoupon.R")
setwd("C:/Users/barna/Documents/Coupons/datasets")
poreData <- readRDS("porosityData.rds")
# store radii for iteration comparison
radiusFirstIter <- list()
radiusLastIter <-  list()
j = 1
for(n in 1:5){
## initial radius guess
r = 1000 # based on ideal coupon radius of 1000 micor-meters
## tolerance for radius diff
tol = 0.001
diffMedians = 100
##--------------------------------------------------------------------
## crop coupon
##--------------------------------------------------------------------
ordered <- order(poreData[[n]]$comZ)
comX <- poreData[[n]]$comX[ordered]
comY <- poreData[[n]]$comY[ordered]
comZ <- poreData[[n]]$comZ[ordered]
oldCoupon <- cbind( comX,
comY,
comZ)
cropSections <- quantile(comZ, prob = seq(0, 1, length = 11), type = 5)
## subset the coupon to avoid the weld/support material remnants
good <- (comZ >= cropSections[3] & comZ <= cropSections[9])
poreCoordinates <- cbind( comX[good],
comY[good],
comZ[good])
##--------------------------------------------------------------------
startValues <- getInitialParameters(poreCoordinates)
N <- length(poreCoordinates[,1])
while (diffMedians > tol){
radiusTarget <- rep(r, N)
centerAxis <- nls(radiusTarget~radiusAligned(poreCoordinates,
centroidX, centroidY,
axisVectorX, axisVectorY),
start = list(centroidX = startValues[2,1],
centroidY = startValues[2,2],
axisVectorX = startValues[1,1],
axisVectorY = startValues[1,2]))
nlsCoeff <- coef(centerAxis)
## run 'getRadius' with the optimal parameter values found by nls
radiusFinal <- radiusAligned(poreCoordinates,
nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
# store the initial median for comaprison (first iteration)
ifelse(diffMedians == 100, radiusFirstIter[[j]] <- radiusFinal, NA)
# update radius and compare to last iteration
diffMedians <- abs(r - median(radiusFinal))
r <- median(radiusFinal)
print(j)
if(j==23){break}
} # end of while loop
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
# store the final median for comparison (last iteration)
radiusLastIter[[j]] <- radiusFinal
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
upCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
setwd("C:/Users/barna/Documents/Coupons/nlsAxisCopy/porosity/couponCaseStudies/caseStudyData/cropped")
save(oldCoupon, upCoupon, nlsCoeff, file = paste0("nlsCoupon", n, ".rda"))
j = j+1
} # end of for loop
