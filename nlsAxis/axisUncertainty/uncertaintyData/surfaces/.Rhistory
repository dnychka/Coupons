slice <- getSurface(i)
X <- c(X,slice[,1])
Y <- c(Y,slice[,2])
Z <- c(Z, rep(i, length(slice[,1])))
}
endTime <- Sys.time()
print(endTime-startTime)
resolution <- 4.5 # multiply by XCT resolution (roughly)
X <- X*resolution; Y <- Y*resolution; Z <- Z*resolution
surfaceCoupon <- cbind(X,Y,Z)
saveRDS(surfaceCoupon, paste0(folder,".rds"))
}
paste0("D:/server-files/",folder)
setwd("D:/server-files/SURFACES")
folderList <- list.files()
for(folder in folderList){
setwd(paste0("D:/server-files/",folder))
print(folder)
startTime <- Sys.time()
rasterList <- mixedsort(list.files(full.names = TRUE))
numTif <- length(rasterList)
rasterList <- rasterList[c(-(1:150),-(numTif:(numTif-150)))] #take off XCT artifacts at top and bottom
choice <- seq(1,length(rasterList),by=10) #subset the slices of the coupon
rasterStack <- stack(rasterList[choice])
X <- vector()
Y <- vector()
Z <- vector()
for(i in 1:dim(rasterStack)[3]){
slice <- getSurface(i)
X <- c(X,slice[,1])
Y <- c(Y,slice[,2])
Z <- c(Z, rep(i, length(slice[,1])))
}
endTime <- Sys.time()
print(endTime-startTime)
resolution <- 4.5 # multiply by XCT resolution (roughly)
X <- X*resolution; Y <- Y*resolution; Z <- Z*resolution
surfaceCoupon <- cbind(X,Y,Z)
saveRDS(surfaceCoupon, paste0(folder,".rds"))
}
folder=folderList[1]
setwd(paste0("D:/server-files/",folder))
paste0("D:/server-files/",folder)
setwd(paste0("D:/server-files/SURFACES/",folder))
for(folder in folderList){
setwd(paste0("D:/server-files/SURFACES/",folder))
print(folder)
startTime <- Sys.time()
rasterList <- mixedsort(list.files(full.names = TRUE))
numTif <- length(rasterList)
rasterList <- rasterList[c(-(1:150),-(numTif:(numTif-150)))] #take off XCT artifacts at top and bottom
choice <- seq(1,length(rasterList),by=10) #subset the slices of the coupon
rasterStack <- stack(rasterList[choice])
X <- vector()
Y <- vector()
Z <- vector()
for(i in 1:dim(rasterStack)[3]){
slice <- getSurface(i)
X <- c(X,slice[,1])
Y <- c(Y,slice[,2])
Z <- c(Z, rep(i, length(slice[,1])))
}
endTime <- Sys.time()
print(endTime-startTime)
resolution <- 4.5 # multiply by XCT resolution (roughly)
X <- X*resolution; Y <- Y*resolution; Z <- Z*resolution
surfaceCoupon <- cbind(X,Y,Z)
saveRDS(surfaceCoupon, paste0(folder,".rds"))
}
setwd("C:/Users/barna/Documents/Coupons/nlsAxis")
source("nlsFunctions.R") #lolol don't set wd in functions
setwd("C:/Users/barna/Documents/Coupons/nlsAxis")
source("nlsFunctions.R") #lolol don't set wd in functions
setwd("D:/server-files/SURFACES")
folderList <- list.files()
setwd(paste0("D:/server-files/SURFACES/",folder))
folder
print(folder)
poreCoordinates <- readRDS(paste0(folder,".rds"))
poreCoordinates <- cropCoupon(n, poreData)
poreCoordinates <- readRDS(paste0(folder,".rds"))
nlsObj <- nlsAxisFit(poreCoordinates)
nlsCoeff <- coef(nlsObj)
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
nlsCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
oldCoupon <- poreCoordinates
library(fields)
library(plyr)
setwd("C:/Users/barna/Documents/Coupons/nlsAxis")
source("nlsFunctions.R") #lolol don't set wd in functions
setwd("D:/server-files/SURFACES")
folderList <- list.files()
for(folder in folderList){
setwd(paste0("D:/server-files/SURFACES/",folder))
print(folder)
poreCoordinates <- readRDS(paste0(folder,".rds"))
##--------------------------------------------------------------------
nlsObj <- nlsAxisFit(poreCoordinates)
nlsCoeff <- coef(nlsObj)
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
nlsCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
oldCoupon <- poreCoordinates
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
save(oldCoupon, nlsCoupon, nlsCoeff, file = paste0("nlsSurfaceCoupon", folder, ".rda"))
} # end of for loop
folderList
for(folder in folderList[35:40]){
setwd(paste0("D:/server-files/SURFACES/",folder))
print(folder)
poreCoordinates <- readRDS(paste0(folder,".rds"))
##--------------------------------------------------------------------
nlsObj <- nlsAxisFit(poreCoordinates)
nlsCoeff <- coef(nlsObj)
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
nlsCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
oldCoupon <- poreCoordinates
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
save(oldCoupon, nlsCoupon, nlsCoeff, file = paste0("nlsSurfaceCoupon", folder, ".rda"))
} # end of for loop
for(folder in folderList[38:40]){
setwd(paste0("D:/server-files/SURFACES/",folder))
print(folder)
poreCoordinates <- readRDS(paste0(folder,".rds"))
##--------------------------------------------------------------------
nlsObj <- nlsAxisFit(poreCoordinates)
nlsCoeff <- coef(nlsObj)
##--------------------------------------------------------------------
## store data
##--------------------------------------------------------------------
## store the old coupon coordinates, the "new" rotated coupon coords, and the nls coeff
## useful for generating surface plots and histograms for each coupon
nlsCoupon <- newCoupon(poreCoordinates, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
oldCoupon <- poreCoordinates
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
save(oldCoupon, nlsCoupon, nlsCoeff, file = paste0("nlsSurfaceCoupon", folder, ".rda"))
} # end of for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty")
source("getKDEfunction.R")
setwd("C:/Users/barna/Documents/Coupons/nlsAxis")
source("nlsFunctions.R") #lolol don't set wd in functions
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
couponList <- list.files(full.names = TRUE)
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
couponList <- list.files(full.names = TRUE)
for(n in couponList){ # begin the coupon for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
load(n)
## model output from first round of nls
nlsTheta <- atan2(nlsCoupon[,2], nlsCoupon[,1])
nlsZ <- nlsCoupon[,3]
nlsR <- sqrt(nlsCoupon[,1]^2+nlsCoupon[,2]^2)
## begin the bootstrap for loop ------------
nsamples = 1000
simNlsCoef <- matrix(ncol = 5, nrow = nsamples, NA)
simRadius <- matrix(ncol = length(nlsCoupon[,1]), nrow = nsamples, NA)
for(i in 1:nsamples){
print(i)
j = 1
while(j < 10){ #try nls up to 10 times
# generate stochastic data set by sampling possible
# thetas and z values from the bivariate KDE of (z, theta)
#bootTheta <- runif( length(nlsCoupon[,1]),0,2*pi)
kdeSample <- getKDEzt(nlsCoupon, 0.07, 900, 300, length(nlsZ))
bootTheta <- kdeSample[[1]]
bootZ <- kdeSample[[2]]
# convert new dataset to cylindrical coordinates
bootX <- nlsR*cos(bootTheta)
bootY <- nlsR*sin(bootTheta)
bootCoupon <- cbind(bootX, bootY, bootZ)
# orient the bootCoupon so it matches the tilt in the
# original data; that way, nlsCoeff will match taking
# coupons from this original tilt -> alignment
bootCoupon <- getOldCoupon(bootCoupon, nlsCoeff["centroidX"], nlsCoeff["centroidY"],
nlsCoeff["axisVectorX"], nlsCoeff["axisVectorY"])
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty/uncertaintyData/surfaces")
save(simNlsCoef, simRadius, poreCoordinates, file = paste0("coupon", cNum, "surfaceCI.rda"))
} #end of coupon reading-in for loop
?sample
bootCoupon <- sample(oldCoupon, 2000, replace = F)
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
nsamples = 1000
simNlsCoef <- matrix(ncol = 5, nrow = nsamples, NA)
simRadius <- matrix(ncol = length(nlsCoupon[,1]), nrow = nsamples, NA)
for(i in 1:nsamples){
print(i)
j = 1
while(j < 10){ #try nls up to 10 times
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
nSurfacePxls = 2000
simNlsCoef <- matrix(ncol =nSurfacePxls, nrow = nsamples, NA)
for(i in 1:nsamples){
print(i)
j = 1
while(j < 10){ #try nls up to 10 times
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
## model output from first round of nls
nlsTheta <- atan2(nlsCoupon[,2], nlsCoupon[,1])
nlsZ <- nlsCoupon[,3]
nlsR <- sqrt(nlsCoupon[,1]^2+nlsCoupon[,2]^2)
nsamples = 1000
nSurfacePxls = 2000
simNlsCoef <- matrix(ncol = 5, nrow = nsamples, NA)
simRadius <- matrix(ncol = nSurfacePxls, nrow = nsamples, NA)
for(i in 1:nsamples){
print(i)
j = 1
while(j < 10){ #try nls up to 10 times
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty")
source("getKDEfunction.R")
setwd("C:/Users/barna/Documents/Coupons/nlsAxis")
source("nlsFunctions.R") #lolol don't set wd in functions
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
couponList <- list.files(full.names = TRUE)
for(n in couponList){ # begin the coupon for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
load(n)
## model output from first round of nls
nlsTheta <- atan2(nlsCoupon[,2], nlsCoupon[,1])
nlsZ <- nlsCoupon[,3]
nlsR <- sqrt(nlsCoupon[,1]^2+nlsCoupon[,2]^2)
## begin the bootstrap for loop ------------
nsamples = 1000
nSurfacePxls = 2000
simNlsCoef <- matrix(ncol = 5, nrow = nsamples, NA)
simRadius <- matrix(ncol = nSurfacePxls, nrow = nsamples, NA)
for(i in 1:nsamples){
print(i)
j = 1
while(j < 25){ #try nls up to 25 times
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty/uncertaintyData/surfaces")
save(simNlsCoef, simRadius, poreCoordinates, file = paste0("coupon", cNum, "surfaceCI.rda"))
} #end of coupon reading-in for loop
nsamples = 1000
nSurfacePxls = 2000
simNlsCoef <- matrix(ncol = 5, nrow = nsamples, NA)
simRadius <- matrix(ncol = nSurfacePxls, nrow = nsamples, NA)
for(i in 1:nsamples){
if(i == 250 | i == 500 | i == 750){print(i)}
j = 1
while(j < 25){ #try nls up to 25 times
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
for(n in couponList){ # begin the coupon for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
load(n)
print(n)
## model output from first round of nls
nlsTheta <- atan2(nlsCoupon[,2], nlsCoupon[,1])
nlsZ <- nlsCoupon[,3]
nlsR <- sqrt(nlsCoupon[,1]^2+nlsCoupon[,2]^2)
## begin the bootstrap for loop ------------
nsamples = 1000
nSurfacePxls = 2000
simNlsCoef <- matrix(ncol = 5, nrow = nsamples, NA)
simRadius <- matrix(ncol = nSurfacePxls, nrow = nsamples, NA)
for(i in 1:nsamples){
print(i)
j = 1
while(j < 25){ #try nls up to 25 times
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty/uncertaintyData/surfaces")
save(simNlsCoef, simRadius, poreCoordinates, file = paste0("coupon", cNum, "surfaceCI.rda"))
} #end of coupon reading-in for loop
save(simNlsCoef, simRadius, nlsCoupon, file = paste0("coupon", cNum, "surfaceCI.rda"))
save(simNlsCoef, simRadius, nlsCoupon, file = paste0("coupon", n, "surfaceCI.rda"))
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty/uncertaintyData/surfaces")
save(simNlsCoef, simRadius, nlsCoupon, file = paste0("coupon", n, "surfaceCI.rda"))
cNum <- as.numeric(gsub(".rda", "", gsub("./nlsCoupon", "", n)))
cNum <- as.numeric(gsub(".rds", "", gsub("./nlsCoupon", "", n)))
cNum <- as.numeric(gsub(".rds", "", gsub("./nlsSurfaceCoupon", "", n)))
cNum <- as.numeric(gsub(".rds", "", gsub("./nlsSurfaceCoupon", "", coupon)))
cNum <- as.numeric(gsub(".rda", "", gsub("./nlsSurfaceCoupon", "", n)))
gsub("./nlsSurfaceCoupon", "", n)
cNum <- gsub(".rda", "", gsub("./nlsSurfaceCoupon", "", n))
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty/uncertaintyData/surfaces")
save(simNlsCoef, simRadius, nlsCoupon, file = paste0("coupon", cNum, "surfaceCI.rda"))
for(n in couponList){ # begin the coupon for loop
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/surfaces/nlsSurfaceData")
load(n)
print(n)
## model output from first round of nls
nlsTheta <- atan2(nlsCoupon[,2], nlsCoupon[,1])
nlsZ <- nlsCoupon[,3]
nlsR <- sqrt(nlsCoupon[,1]^2+nlsCoupon[,2]^2)
## begin the bootstrap for loop ------------
nsamples = 1000
nSurfacePxls = 2000
simNlsCoef <- matrix(ncol = 5, nrow = nsamples, NA)
simRadius <- matrix(ncol = nSurfacePxls, nrow = nsamples, NA)
for(i in 1:nsamples){
print(i)
j = 1
while(j < 25){ #try nls up to 25 times
bootCoupon <- oldCoupon[sample(oldCoupon, 2000, replace = F),]
# estimate the parameter values for each new fabricated data set
N <- length(bootCoupon[,1])
startValues <- getInitialParameters(bootCoupon)
distTarget <- rep(0,N)
nlsObj <- try(nls(distTarget~getDistance(bootCoupon,
centroidX, centroidY,
axisVectorX, axisVectorY, r),
start = list(centroidX = startValues[4],
centroidY = startValues[5],
axisVectorX = startValues[1],
axisVectorY = startValues[2],
r = startValues[7]),
control =  nls.control(minFactor = 1/10000000000)))
if(class(nlsObj) != "try-error"){
simNlsCoef[i,] <- coef(nlsObj)
tempNlsCoeff <- coef(nlsObj)
tempCoupon <- newCoupon(bootCoupon, tempNlsCoeff["centroidX"], tempNlsCoeff["centroidY"],
tempNlsCoeff["axisVectorX"], tempNlsCoeff["axisVectorY"])
tempRadius <- sqrt(tempCoupon[,1]^2+tempCoupon[,2]^2)
simRadius[i,] <- tempRadius
break
}
j <- j+1
} #end of while loop
} #end of bootstrap for loop
cNum <- gsub(".rda", "", gsub("./nlsSurfaceCoupon", "", n))
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/axisUncertainty/uncertaintyData/surfaces")
save(simNlsCoef, simRadius, nlsCoupon, file = paste0("coupon", cNum, "surfaceCI.rda"))
} #end of coupon reading-in for loop
