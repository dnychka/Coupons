}
j
l
j=1
for(k in c(3,5,10,15)){
l=1
for(n in layerSpacing){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0("layer spacing at ", round(n,3)))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
xline(Fr[ind], col="violetred1", lty=3)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, P[i]),  NA)
}
}
saveThreshold[j,l] <- length(ind)
harmonicSignals[j,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
j=j+1
}
l
j
saveThreshold <- matrix(NA, nrow = 4, ncol = length(layerSpacing))
harmonicSignals <- matrix(NA, nrow = 4, ncol = length(layerSpacing))
w=1
for(k in c(3,5,10,15)){
l=1
for(n in layerSpacing){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0("layer spacing at ", round(n,3)))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
xline(Fr[ind], col="violetred1", lty=3)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, P[i]),  NA)
}
}
saveThreshold[w,l] <- length(ind)
harmonicSignals[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
w=w+1
}
harmonicSignals
saveRDS(harmonicSignals, "signalThreshold.rds")
redo <- order(signalStrength)
for(k in 10){
l=1
for(n in layerSpacing[redo[1:10]]){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0("layer spacing at ", round(n,3)))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, Fr[i]),  NA)
}
}
xline(findHarmonic, col = "violetred1", lty=3)
#saveThreshold[w,l] <- length(ind)
#signalThreshold[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
w=w+1
}
signalStrength[order(signalStrength)]
for(n in layerSpacing[redo[140:145]]){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0("layer spacing at ", round(n,3)))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, Fr[i]),  NA)
}
}
xline(findHarmonic, col = "violetred1", lty=3)
#saveThreshold[w,l] <- length(ind)
#signalThreshold[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
redo
length(redo)
redo[140:145]
signalStrength[redo[140:145]]
for(n in layerSpacing[redo[140:145]]){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0(signalStength[n]))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, Fr[i]),  NA)
}
}
xline(findHarmonic, col = "violetred1", lty=3)
#saveThreshold[w,l] <- length(ind)
#signalThreshold[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
for(n in layerSpacing[redo[140:145]]){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0(signalStrength[n]))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, Fr[i]),  NA)
}
}
xline(findHarmonic, col = "violetred1", lty=3)
#saveThreshold[w,l] <- length(ind)
#signalThreshold[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
signalStrength[order(signalStrength)]
location[order(location)]
high <- order(signalStrength, decreasing = TRUE)
signalStrength[high]
for(n in layerSpacing[high[1:10]]){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0(signalStrength[n]))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, Fr[i]),  NA)
}
}
xline(findHarmonic, col = "violetred1", lty=3)
#saveThreshold[w,l] <- length(ind)
#signalThreshold[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
layerSpacing[high[1:10]]
l=1
for(n in layerSpacing[high[1:10]]){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0(signalStrength[high[l]]))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, Fr[i]),  NA)
}
}
xline(findHarmonic, col = "violetred1", lty=3)
#saveThreshold[w,l] <- length(ind)
#signalThreshold[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
l=1
for(n in layerSpacing[high[1:10]]){
print(round(n,3))
load(paste0(round(n,3),"spacingSyn0.rda"))
# center the coupon
centerCoupon <- cbind(scale(newCoupon[,1], center = TRUE, scale = FALSE),
scale(newCoupon[,2], center = TRUE, scale = FALSE),
newCoupon[,3])
h<-hist(~newCoupon[,3], w=5, plot = FALSE)
histSave <- rbind(h$counts, h$mids)
threshold <- k
influence <- 0
xGrid <- seq(min(histSave[2,]), max(histSave[2,]), length.out = length(histSave[1,]))
lowpass <- splint(histSave[2,], histSave[1,], xGrid, lambda = 50)
frDt <- fft(histSave[1,]-lowpass)
Dtlen <- length(histSave[1,])
Fr <- (1:Dtlen/Dtlen)[1:(Dtlen/2)]
P <- (Mod(2*frDt/Dtlen)^2)[1:(Dtlen/2)]
plot(Fr,P,type="l", main = paste0(signalStrength[high[l]]), ylim = c(0,5))
lag <- length(Fr)/10
peak <- findFreq(P,lag,threshold,influence)
ind <- which(peak$signals==1)
Ppeaks <- P[ind]
Frpeaks <- Fr[ind]
findHarmonic <- vector()
origFreq <- Frpeaks[which.max(Ppeaks)]
for(j in c(1,1/2,1/3,1/4,1/5)){
fundFreq <- origFreq*j
if(fundFreq <= .15){break}
}
##find the harmonics
for(j in 1:5){
for(i in 1:length(Fr)){
ifelse(isTRUE(all.equal(fundFreq*j, Fr[i], tol = 0.05)), findHarmonic <- c(findHarmonic, Fr[i]),  NA)
}
}
xline(findHarmonic, col = "violetred1", lty=3)
#saveThreshold[w,l] <- length(ind)
#signalThreshold[w,l] <- sum(findHarmonic)/sum(P)
l=l+1
}
plot(h)
location[order(location)]
location[Ninety][order(location[Ninety])]
library(fields)
library(plyr)
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/datasets")
load("radiusIterations.rda")
load("couponCov.rda")
medianWithoutNA<-function(x) {
median(x[which(!is.na(x))])
}
##--------------
## polar angle 0
##--------------
Zero <- which(couponCov$polarAngle==0)
## histogram, final radial distance
hist(as.vector(t(radiusLastIter[,Zero])), breaks = seq(0,1400, by = 25), freq = FALSE,
col = "grey40", main = "", xlab = "radial distance")
mtext("radial pore distance to nls fit axis", side=3, adj=0, line=1.6, cex=1.4, font=1)
mtext("polar angle 0 ", side=3, adj=0, line=0.3, cex=1, font=1)
xline(median(apply(radiusFirstIter[,Zero],2, medianWithoutNA)), col = "tomato")
##--------------
## polar angle 45
##--------------
fortyFive <- which(couponCov$polarAngle==45)
xline(median(apply(radiusFirstIter[,fortyFive],2, medianWithoutNA)), col = "cornflowerblue")
xline(median(apply(radiusLastIter[,Zero],2, medianWithoutNA)), col = "tomato")
xline(median(apply(radiusLastIter[,fortyFive],2, medianWithoutNA)), col = "cornflowerblue")
## histogram, final radial distance
hist(as.vector(t(radiusLastIter[,Zero])), breaks = seq(0,1400, by = 25), freq = FALSE,
col = "grey40", main = "", xlab = "radial distance")
mtext("radial pore distance to nls fit axis", side=3, adj=0, line=1.6, cex=1.4, font=1)
mtext("polar angle 0 ", side=3, adj=0, line=0.3, cex=1, font=1)
xline(median(apply(radiusLastIter[,Zero],2, medianWithoutNA)), col = "tomato")
xline(median(apply(radiusLastIter[,fortyFive],2, medianWithoutNA)), col = "cornflowerblue")
bplot(apply(radiusLastIter,2, medianWithoutNA), by = couponCov$polarAngle)
bplot(apply(radiusLastIter[c(Zero,fortyFive)],2, medianWithoutNA), by = couponCov$polarAngle)
c(Zero,fortyFive)
bplot(apply(radiusLastIter[,c(Zero,fortyFive)],2, medianWithoutNA), by = couponCov$polarAngle)
bplot(apply(radiusLastIter[,c(Zero,fortyFive)],2, medianWithoutNA), by = couponCov$polarAngle[c(Zero,fortyFive)])
vertMedians <- apply(radiusLastIter[,c(Zero,fortyFive)],2, medianWithoutNA)
vertMedians[order(vertMedians)]
?bplot
?boxplot
bplot(vertMedians,
by = couponCov$polarAngle[c(Zero,fortyFive)],
boxwex = 0.5, pch = 20, notch=TRUE)
bplot(vertMedians,
by = couponCov$polarAngle[c(Zero,fortyFive)],
boxwex = 0.5, pch = 20)
bplot(vertMedians,
by = couponCov$polarAngle[c(Zero,fortyFive)],
boxwex = 0.5, pch = 20,
staplewex = 0.5)
bplot(vertMedians,
by = couponCov$polarAngle[c(Zero,fortyFive)],
boxwex = 0.5, pch = 20,
frame = F)
hist(vertMedians)
hist(vertMedians, breaks = 30)
hist(vertMedians, breaks = 20)
hist(vertMedians, breaks = 20, freq = FALSE)
library(rgl)
library(conicfit)
library(fields)
library(useful)
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/couponCaseStudies/caseStudyData")
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/45degreeSlice/45degreeData")
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/couponCaseStudies/caseStudyData")
readRDS("nlsCoupon56.rds")
setwd("C:/Users/barna/Documents/Coupons/nlsAxis/couponCaseStudies/caseStudyData/cropped")
readRDS("nlsCoupon56.rds")
load("nlsCoupon56.rda")
## calculate points on ideal coupon surface
circXY <- calculateCircle(nlsCoeff["axisVectorX"],
nlsCoeff["axisVectorY"], 1000, steps = 100)
circZ <- seq(min(newCoupon[,3]), max(newCoupon[,3]), length.out = 200)
xyzcoord <- cbind(rep(circXY[,1], 200), rep(circXY[,2],200), rep(circZ, each = 100))
idealCyl <- cylinder3d(center = xyzcoord, radius = 2, closed = TRUE)
open3d()
par3d(cex=0.7)
plot3d(oldCoupon[,1],
oldCoupon[,2],
oldCoupon[,3],
type = "s", size = 0.45,
xlab = " ", ylab = " ", zlab = " ")
open3d()
par3d(cex=0.7)
plot3d(newCoupon[,1],
newCoupon[,2],
newCoupon[,3],
type = "s", size = 0.45,
zlab = "z", xlab = "x", ylab = "y")
lines3d(nlsCoeff["axisVectorX"],
nlsCoeff["axisVectorY"],
circZ, col = "darkorange",
lwd = 3)
rgl.material(alpha = 0.5, lit = FALSE)
shade3d(idealCyl, col = "cornflowerblue")
open3d()
par3d(cex=0.7)
plot3d(oldCoupon[,1],
oldCoupon[,2],
oldCoupon[,3],
type = "s", size = 0.45,
xlab = " ", ylab = " ", zlab = " ")
hist(radiusLastIter[,c(Zero,fortyFive)])
hist(t(radiusLastIter[,c(Zero,fortyFive)]))
hist(t(radiusLastIter[,c(Zero,fortyFive)]), breaks = 20)
hist(t(radiusLastIter[,c(Zero,fortyFive)]), breaks = 20, freq=FALSE)
hist(t(radiusLastIter[,c(Zero,fortyFive)]), breaks = 30, freq=FALSE)
hist(t(radiusLastIter[,c(Zero,fortyFive)]), breaks = 50, freq=FALSE)
hist(vertMedians, breaks = 20, freq = FALSE)
xline(median(vertMedians), col = "tomato", lty=3)
hist(t(radiusLastIter[,c(Zero,fortyFive)]), breaks = 50, freq=FALSE)
xline(median(vertMedians), col = "tomato", lty=3)
